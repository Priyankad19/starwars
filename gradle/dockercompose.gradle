
// task for developers to execute AT locally.

task startDockerCompose(type: ExecWait) {
    command 'docker-compose up'
    ready 'Server startup in'
    directory "$rootDir"

    // tries to automatically set environment variables so developers don't need to configure locally
    def planetsImage;
    if (!System.env.containsKey('starwars_planets') && !System.properties.containsKey('starwars_planets')) {
        def tag = project.hasProperty('dockerTag') ? project.getProperty('dockerTag') : 'latest'
        planetsImage = config.common.docker.organization + '/' + config.common.docker.image + ':' + tag
    }

    // if planetsImage is null means that it is set as system property or environment variable
    // and we don't need to touch the environment vars
    if (planetsImage != null) {
        def planetsImageEnv = [starwars_planets: planetsImage]
        environment planetsImageEnv
    }
}

task stopDockerCompose(type: ExecWait) {
    command 'docker-compose stop'
    ready 'done'
    directory "$rootDir"
}

task removeDockerCompose(type: ExecWait, dependsOn: 'stopDockerCompose') {
    command 'docker-compose rm -f'
    ready 'done'
    directory "$rootDir"
}


// Custom classes

class ExecWait extends DefaultTask {
    String command
    String ready
    String directory
    Map<String, String> environment

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        if (environment != null) {
            builder.environment().putAll(environment)
        }
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is executed"
                break;
            }
        }
    }
}