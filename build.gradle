apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'maven-publish'


// all projects need JaCoCo integration, compiling in Java 8 and similar group and version strategy
allprojects {
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'org.starwars'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
    }

}

// there are dependencies that are common on core project (this) and all other subprojects, like testing libraries
dependencies {
    providedCompile 'javax:javaee-api:7.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.4'
    testCompile 'org.apache.johnzon:johnzon-jaxrs:0.9.2-incubating'
    testCompile 'com.github.tomakehurst:wiremock:2.0.8-beta'
    testCompile('org.mockito:mockito-all:1.10.19') {
        exclude group: 'org.hamcrest'
    }

}


// aggregates jacoco resutls from all subprojects and core project and generate a report
task jacocoRootTestReport(type: JacocoReport) {

    sourceSets sourceSets.main

    def jacocoTestFiles = ["$buildDir/jacoco/test.exec"]
    subprojects.each { p ->
        jacocoTestFiles << "$p.buildDir/jacoco/test.exec"
    }

    executionData files(jacocoTestFiles)

    reports {
        xml.enabled false
        csv.enabled false
    }
}


// add pmd static code analysis
pmd {
    ignoreFailures = true
    ruleSets = [
            "basic"
    ]
}

// initialize ext.config object with configuration parameters
apply from: "$rootDir/gradle/configuring.gradle"

// change version of all projects to version + (jenkinsBuild?)
allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = rootProject.ext.parsedConfig
}

// adds a build-info file inside war file
task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

// creates war with Manifest and build file information
war {
    dependsOn createBuildInfoFile
    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
    manifest {
        attributes "Version": project.version.toString()
    }
}

// to publish artifact (war) we need to create sourceJar (jar with sources) and javadocJar (jar with javadoc) tasks
// so those are called and attached to the publish
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

// gets from config variable the location where artifacts are published
ext.repoUrl = "$config.binaryRepository.url/$config.binaryRepository.name"

// publish artifact to
publishing {
    publications {
        webApp(MavenPublication){
            from components.web
            // sourceJar task created previously
            artifact sourceJar {
                classifier "sources"
            }
            // javadocJar task created previously
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }

    // Local directory is used for simplification

    repositories {
        maven {
            url repoUrl
        }
    }
}